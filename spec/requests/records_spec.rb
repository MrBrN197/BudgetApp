require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/records', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Record. As you add validations to Record, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { name: 'Goyard Croisière', ammount: 2_600, user: @user }
  end

  let(:invalid_attributes) do
    { name: nil, ammount: nil, user: nil }
  end

  before(:each) do
    @user = User.create!(name: 'kanye', email: 'kanye@west.com', password: 'genius')
    login_as @user
    @category = Category.create!(name: 'Designer Shopping', user: @user)
    @record = @category.records.create! valid_attributes
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      get category_records_path(@category)
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      get category_record_url(@category, @record)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_category_record_url(@category)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      get edit_category_record_url(@category, @record)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Record' do
        expect do
          post category_records_url(@category), params: { record: valid_attributes }
        end.to change(Record, :count).by(1)
      end

      it 'redirects to the created record' do
        post category_records_url(@category), params: { record: valid_attributes }
        expect(response).to redirect_to(category_record_url(@category, Record.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Record' do
        expect do
          post category_records_url(@category, format: :json), params: { record: invalid_attributes }
        end.to change(Record, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post category_records_url(@category), params: { record: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { name: 'Faux Goyard Croisière', ammount: 1_000 }
      end

      it 'updates the requested record' do
        patch category_record_url(@category, @record), params: { record: new_attributes }
        @record.reload
        expect(@record.name).to eql 'Faux Goyard Croisière'
        expect(@record.ammount).to eq 1_000
      end

      it 'redirects to the record' do
        patch category_record_url(@category, @record), params: { record: new_attributes }
        @record.reload
        expect(response).to redirect_to(category_record_url(@category, @record))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        patch category_record_url(@category, @record), params: { record: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested record' do
      expect do
        delete category_record_url(@category, @record)
      end.to change(Record, :count).by(-1)
    end

    it 'redirects to the records list' do
      delete category_record_url(@category, @record)
      expect(response).to redirect_to(category_records_url(@category))
    end
  end
end
